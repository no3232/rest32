// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // pnpm의 문제
  // output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uuid              String              @id @default(uuid())
  userId            String              @unique @map("user_id")
  password          String
  name              String
  email             String
  phoneNumber       String              @map("phone_number")
  profilePicture    String              @default("") @map("profile_picture")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  ReservationOnUser ReservationOnUser[]
  Reservation       Reservation[]
}

model Reservation {
  uuid              String              @id @default(uuid())
  reservationDate   DateTime            @map("reservation_date")
  menu              String?
  ownerId           String              @map("owner_id")
  owner             User                @relation(fields: [ownerId], references: [uuid], onDelete: Cascade)
  ReservationOnUser ReservationOnUser[]
}

model ReservationOnUser {
  userUuid      String      @map("user_uuid")
  reservationId String      @map("reservation_id")
  user          User        @relation(fields: [userUuid], references: [uuid])
  reservation   Reservation @relation(fields: [reservationId], references: [uuid], onDelete: Cascade)
  request       String?
  isAccepted    Boolean     @default(false) @map("is_accepted")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@id([userUuid, reservationId])
}
